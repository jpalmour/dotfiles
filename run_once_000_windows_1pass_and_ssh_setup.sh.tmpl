# Requires PowerShell running as Administrator for winget/choco installs
$ErrorActionPreference = 'Stop'

function Test-Command { param([string]$Name) Get-Command $Name -ErrorAction SilentlyContinue | Out-Null }

function Install-WithWinget {
  Write-Host "[Windows] installing via winget‚Ä¶"
  # Desktop app
  winget install --id AgileBits.1Password --exact --silent --accept-source-agreements --accept-package-agreements
  # CLI
  winget install --id AgileBits.1Password.CLI --exact --silent --accept-source-agreements --accept-package-agreements
}

function Install-WithChoco {
  Write-Host "[Windows] installing via Chocolatey‚Ä¶"
  if (!(Test-Command choco)) {
    Set-ExecutionPolicy Bypass -Scope Process -Force
    [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.SecurityProtocolType]::Tls12
    Invoke-Expression ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
  }
  choco install -y 1password
  choco install -y 1password-cli
}

# Skip if both present
$opExists = Test-Command op
$desktopExists = (Get-Item "C:\Program Files\1Password\1Password.exe" -ErrorAction SilentlyContinue) -ne $null `
  -or (Get-Item "$env:LOCALAPPDATA\1Password\app\*\1Password.exe" -ErrorAction SilentlyContinue) -ne $null

if ($opExists -and $desktopExists) {
  Write-Host "[Windows] 1Password CLI and app already present."
} else {
  if (Test-Command winget) {
    Install-WithWinget
  } else {
    Install-WithChoco
  }
}

Write-Host "[Windows] verifying‚Ä¶"
try { & "op" --version } catch {}
try {
  $paths = @(
    "C:\Program Files\1Password\1Password.exe",
    "$env:LOCALAPPDATA\1Password\app\*\1Password.exe"
  )
  $app = Get-ChildItem -Path $paths -ErrorAction SilentlyContinue | Select-Object -First 1
  if ($app) { & "$($app.FullName)" --version 2>$null | Out-Null }
} catch {}


# --- prompt user to enable CLI integration -----------------------------------
try {
  Write-Host ""
  Write-Host "[Windows] Opening 1Password‚Ä¶"
  # Try common install locations; fallback to Start-Process with app name
  $paths = @(
    "$env:ProgramFiles\1Password\1Password.exe",
    "$env:LOCALAPPDATA\1Password\app\*\1Password.exe"
  )
  $app = Get-ChildItem -Path $paths -ErrorAction SilentlyContinue | Select-Object -First 1
  if ($app) { Start-Process -FilePath $app.FullName } else { Start-Process "1Password" -ErrorAction SilentlyContinue }

  Write-Host "[Windows] In 1Password, please enable these settings:"
  Write-Host "  1. Settings ‚Üí Developer ‚Üí ‚úÖ 'Integrate with 1Password CLI'"
  Write-Host "  2. Settings ‚Üí Developer ‚Üí ‚úÖ 'Use the SSH agent'"
  Write-Host "  3. (Optional) Settings ‚Üí Security ‚Üí ‚úÖ 'Windows Hello for unlock'"
  Write-Host ""
  Write-Host -NoNewline "[Windows] Press any key when finished‚Ä¶"
  # any key (no echo)
  $null = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")
  Write-Host ""

  try {
    op account list *>$null
    Write-Host "[Windows] ‚úÖ 1Password CLI can see your accounts."
  } catch {
    Write-Host "[Windows] ‚ö†Ô∏è  'op account list' didn't succeed. 1Password integration is required for machine setup."
    exit 1
  }
  
  # Check for SSH key and offer to create if missing
  Write-Host "[Windows] Checking for SSH key in 1Password..."
  try {
    op item get "Dev SSH Key" --fields "public key" *>$null
    Write-Host "[Windows] ‚úÖ SSH key 'Dev SSH Key' found in 1Password."
    # Show key age if it has creation date metadata
    try {
      $creationDate = op item get "Dev SSH Key" --fields "Creation Date" 2>$null
      if ($creationDate) {
        Write-Host "[Windows]    Created: $creationDate"
      }
    } catch {}
  } catch {
    Write-Host "[Windows] ‚ö†Ô∏è  SSH key 'Dev SSH Key' not found in 1Password."
    Write-Host ""
    $createKey = Read-Host "[Windows] Would you like to create a new SSH key now? (y/N)"
    if ($createKey -match "^[Yy]$") {
      Write-Host "[Windows] Creating new Ed25519 SSH key..."
      
      # Create SSH key with metadata including creation date
      $creationDate = (Get-Date).ToUniversalTime().ToString("yyyy-MM-dd HH:mm:ss UTC")
      try {
        op item create --category "SSH Key" --title "Dev SSH Key" --ssh-generate-key ed25519 "Creation Date[text]=$creationDate" "Purpose[text]=Development machine SSH authentication and Git signing" *>$null
        
        Write-Host "[Windows] ‚úÖ SSH key created successfully!"
        Write-Host ""
        Write-Host "[Windows] üîë Public key for GitHub:"
        Write-Host "========================================================================="
        op item get "Dev SSH Key" --fields "public key"
        Write-Host "========================================================================="
        Write-Host ""
        Write-Host "[Windows] üìã Next steps - Add this key to GitHub TWICE:"
        Write-Host "  1. Go to https://github.com/settings/keys"
        Write-Host "  2. Click 'New SSH key' ‚Üí Add as 'Authentication Key'"
        Write-Host "  3. Click 'New SSH key' again ‚Üí Add as 'Signing Key'"
        Write-Host ""
        Write-Host -NoNewline "[Windows] Press any key after adding the key to GitHub (both auth & signing)..."
        $null = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")
        Write-Host ""
      } catch {
        Write-Host "[Windows] ‚ùå Failed to create SSH key. Please create it manually:"
        Write-Host "[Windows] Run: op item create --category `"SSH Key`" --title `"Dev SSH Key`" --ssh-generate-key ed25519"
      }
    } else {
      Write-Host "[Windows] Skipping SSH key creation. You can create it manually later."
      Write-Host "[Windows] See 1PASS_SETUP.md for instructions."
    }
  }
  
  # Check for ssh-hosts and offer to create if missing
  Write-Host "[Windows] Checking for SSH hosts configuration..."
  try {
    op item get "ssh-hosts" --fields "hosts" *>$null
    Write-Host "[Windows] ‚úÖ SSH hosts configuration found in 1Password."
  } catch {
    Write-Host "[Windows] ‚ö†Ô∏è  SSH hosts configuration 'ssh-hosts' not found."
    Write-Host ""
    $createHosts = Read-Host "[Windows] Would you like to create it now? (y/N)"
    if ($createHosts -match "^[Yy]$") {
      # Create basic ssh-hosts configuration
      $hostsTemplate = @"
# Add your custom SSH host configurations here
# Example:
# Host myserver
#     HostName 192.168.1.100
#     User myuser
#     Port 22
"@
      try {
        op item create --category "Secure Note" --title "ssh-hosts" "hosts=$hostsTemplate" *>$null
        Write-Host "[Windows] ‚úÖ SSH hosts configuration created with template."
      } catch {
        Write-Host "[Windows] ‚ùå Failed to create SSH hosts configuration."
      }
    }
  }
  
} catch {
  Write-Host "[Windows] Skipping 1Password app setup prompt due to error: $($_.Exception.Message)"
  exit 1
}

# Note about re-applying chezmoi when 1Password was just installed
Write-Host "[Windows] Note: if 1pass was not installed before this command you will need to reapply to complete machine setup"
