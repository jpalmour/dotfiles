#!/usr/bin/env bash
set -euo pipefail

echo " bootstrap starting..."

# --- Refresh & base toolchain -------------------------------------------------
echo " apt update/upgrade"
sudo apt-get update -y
sudo apt-get upgrade -y

echo " base CLI tools"
sudo apt-get install -y \
  git curl wget vim tmux tree jq ripgrep \
  ca-certificates gnupg lsb-release build-essential apt-transport-https \
  openssh-server

# --- SSH Server setup ---------------------------------------------------------
if command -v systemctl >/dev/null 2>&1; then
  echo " configuring SSH server..."
  # Enable and start SSH service
  sudo systemctl enable ssh
  sudo systemctl start ssh
  
  # Configure firewall if ufw is installed
  if command -v ufw >/dev/null 2>&1; then
    sudo ufw allow ssh
  fi
fi

# --- Zsh ----------------------------------------------------------
if ! command -v zsh >/dev/null 2>&1; then
  echo " installing zsh..."
  sudo apt-get install -y zsh
fi

# Set zsh as the default shell if not already
if [ "$(getent passwd "$USER" | awk -F: '{print $7}')" != "$(command -v zsh)" ]; then
  echo " setting default shell to zsh..."
  sudo chsh -s "$(command -v zsh)" "$USER" || true
fi

# --- Snap packages ------------------------------------------------------------
echo " installing Snap packages..."
# VS Code
sudo snap install code --classic
# Chrome (using Chromium as it's the Snap-native browser)
sudo snap install chromium
# Slack
sudo snap install slack --classic
# GitHub CLI
sudo snap install gh
# Ghostty
sudo snap install ghostty --classic

# --- Docker Engine (official apt repo) ---------------------------------------
if ! command -v docker >/dev/null 2>&1; then
  echo " installing Docker Engine..."
  sudo apt-get remove -y docker docker-engine docker.io containerd runc || true
  sudo install -m 0755 -d /etc/apt/keyrings
  curl -fsSL https://download.docker.com/linux/ubuntu/gpg \
    | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
  sudo chmod a+r /etc/apt/keyrings/docker.gpg
  . /etc/os-release
  echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] \
https://download.docker.com/linux/ubuntu ${UBUNTU_CODENAME} stable" \
  | sudo tee /etc/apt/sources.list.d/docker.list >/dev/null
  sudo apt-get update -y
  sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
  sudo usermod -aG docker "$USER" || true
fi


# nvm install (nounset-safe wrapper)
install_nvm_and_node() {
  # Install nvm if missing
  if [ ! -d "$HOME/.nvm" ]; then
    echo " installing nvm..."
    # nvm official install (quiet-ish)
    curl -fsSL https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.1/install.sh | bash
  fi

  # Prepare to source nvm
  export NVM_DIR="$HOME/.nvm"

  # Save current nounset state, disable -u just for nvm
  case "$-" in *u*) had_u=1 ;; *) had_u=0 ;; esac
  set +u

  # shellcheck source=/dev/null
  [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
  # Optional: completions
  [ -s "$NVM_DIR/bash_completion" ] && . "$NVM_DIR/bash_completion"

  # Now it’s safe to run nvm commands
  echo " installing latest LTS Node via nvm..."
  nvm install --lts
  nvm alias default 'lts/*'

  # Restore nounset if it was on
  [ "$had_u" = 1 ] && set -u
}

install_nvm_and_node


echo " bootstrap done ✅  (log out/in to use docker without sudo)"

