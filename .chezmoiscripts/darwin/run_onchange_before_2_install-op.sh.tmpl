#!/bin/sh
set -e
# ensure brew is in PATH
if [ -x /opt/homebrew/bin/brew ]; then
  eval "$(/opt/homebrew/bin/brew shellenv)"
elif [ -x /usr/local/bin/brew ]; then
  eval "$(/usr/local/bin/brew shellenv)"
else
  echo "Homebrew is required" >&2
  exit 1
fi
if ! command -v 1password >/dev/null 2>&1; then
    brew install --cask 1password
fi
if ! command -v op >/dev/null 2>&1; then
    brew install 1password-cli
fi

# Verify versions
command -v 1password && 1password --version || true
command -v op && op --version || true

# --- prompt user to enable CLI integration and SSH agent --------------------
echo
echo " Opening 1Password‚Ä¶"
open -a "1Password" || true
echo " In 1Password, please enable these settings:"
echo "  1. Settings ‚Üí Developer ‚Üí ‚úÖ 'Integrate with 1Password CLI'"
echo "  2. Settings ‚Üí Developer ‚Üí ‚úÖ 'Use the SSH agent'"
echo
read -n 1 -s -r -p " Press any key when finished..."
echo
if op account list >/dev/null 2>&1; then
  echo " ‚úÖ 1Password CLI is integrated."
else
  echo " ‚ö†Ô∏è  'op account list' didn't succeed. 1Password CLI integration is necessary for machine setup."
  exit 1
fi

# Check for SSH key and offer to create if missing
echo " Checking for SSH key in 1Password..."
if ! op item get "Dev SSH Key" --fields "public key" >/dev/null 2>&1; then
  echo " ‚ö†Ô∏è  SSH key 'Dev SSH Key' not found in 1Password."
  echo
  read -p " Would you like to create a new SSH key now? (y/N): " -n 1 -r
  echo
  if [[ $REPLY =~ ^[Yy]$ ]]; then
    echo " Creating new Ed25519 SSH key..."
    creation_date=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
    if op item create \
      --category "SSH Key" \
      --title "Dev SSH Key" \
      --ssh-generate-key ed25519 \
      "Creation Date[text]=${creation_date}" \
      "Purpose[text]=Development machine SSH authentication and Git signing" \
      >/dev/null 2>&1; then

      echo " ‚úÖ SSH key created successfully!"
      echo
      echo " üîë Public key for GitHub:"
      echo "========================================================================="
      op item get "Dev SSH Key" --fields "public key"
      echo "========================================================================="
      echo
      echo " üìã Next steps - Add this key to GitHub TWICE:"
      echo "  1. Go to https://github.com/settings/keys"
      echo "  2. Click 'New SSH key' ‚Üí Add as 'Authentication Key'"
      echo "  3. Click 'New SSH key' again ‚Üí Add as 'Signing Key'"
      echo
      read -n 1 -s -r -p " Press any key after adding the key to GitHub (both auth & signing)..."
      echo
    else
      echo " ‚ùå Failed to create SSH key. Please create it manually:"
      echo " Run: op item create --category \"SSH Key\" --title \"Dev SSH Key\" --ssh-generate-key ed25519"
    fi
  else
    echo " Skipping SSH key creation. You can create it manually later."
    echo " See 1PASS_SETUP.md for instructions."
  fi
else
  echo " ‚úÖ SSH key 'Dev SSH Key' found in 1Password."
  creation_date=$(op item get "Dev SSH Key" --fields "Creation Date" 2>/dev/null || echo "")
  if [ -n "$creation_date" ]; then
    echo "    Created: ${creation_date}"
  fi
fi

# Check for ssh-hosts and offer to create if missing
echo " Checking for SSH hosts configuration..."
if ! op item get "ssh-hosts" --fields "hosts" >/dev/null 2>&1; then
  echo " ‚ö†Ô∏è  SSH hosts configuration 'ssh-hosts' not found."
  echo
  read -p " Would you like to create it now? (y/N): " -n 1 -r
  echo
  if [[ $REPLY =~ ^[Yy]$ ]]; then
    if op item create \
      --category "Secure Note" \
      --title "ssh-hosts" \
      "hosts=# Add your custom SSH host configurations here
# Example:
# Host myserver
#     HostName 192.168.1.100
#     User myuser
#     Port 22" \
      >/dev/null 2>&1; then
      echo " ‚úÖ SSH hosts configuration created with template."
    else
      echo " ‚ùå Failed to create SSH hosts configuration."
    fi
  fi
else
  echo " ‚úÖ SSH hosts configuration found in 1Password."
fi

{{- if .is_work_machine }}

# Check for WORK SSH key and offer to create if missing
echo " Checking for WORK SSH key in 1Password..."
if ! op item get "Work SSH Key" --fields "public key" >/dev/null 2>&1; then
  echo " ‚ö†Ô∏è  SSH key 'Work SSH Key' not found in 1Password."
  echo
  read -p " Would you like to create a new WORK SSH key now? (y/N): " -n 1 -r
  echo
  if [[ $REPLY =~ ^[Yy]$ ]]; then
    echo " Creating new Ed25519 WORK SSH key..."

    creation_date=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
    if op item create \
      --category "SSH Key" \
      --title "Work SSH Key" \
      --ssh-generate-key ed25519 \
      "Creation Date[text]=${creation_date}" \
      "Purpose[text]=Work machine SSH authentication and Git signing" \
      >/dev/null 2>&1; then

      echo " ‚úÖ Work SSH key created successfully!"
      echo
      echo " üîë Public key for GitHub (WORK):"
      echo "========================================================================="
      op item get "Work SSH Key" --fields "public key"
      echo "========================================================================="
      echo
      echo " üìã Next steps - Add this WORK key to GitHub TWICE (work account):"
      echo "  1. Go to https://github.com/settings/keys"
      echo "  2. Click 'New SSH key' ‚Üí Add as 'Authentication Key'"
      echo "  3. Click 'New SSH key' again ‚Üí Add as 'Signing Key'"
      echo
      read -n 1 -s -r -p " Press any key after adding the WORK key to GitHub (both auth & signing)..."
      echo
    else
      echo " ‚ùå Failed to create WORK SSH key. Please create it manually:"
      echo " Run: op item create --category \"SSH Key\" --title \"Work SSH Key\" --ssh-generate-key ed25519"
    fi
  else
    echo " Skipping WORK SSH key creation. You can create it manually later."
  fi
else
  echo " ‚úÖ WORK SSH key 'Work SSH Key' found in 1Password."
  creation_date=$(op item get "Work SSH Key" --fields "Creation Date" 2>/dev/null || echo "")
  if [ -n "$creation_date" ]; then
    echo "    Created: ${creation_date}"
  fi
fi

{{- end }}

{{- if .is_work_machine }}

# Write private keys (and matching .pub) to ~/.ssh for host-based selection
echo " Ensuring SSH keys exist in ~/.ssh for host selection..."
mkdir -p "$HOME/.ssh"
chmod 700 "$HOME/.ssh"

DEV_PRIV_PATH="$HOME/.ssh/id_ed25519_dev"
DEV_PUB_PATH="$HOME/.ssh/id_ed25519_dev.pub"
WORK_PRIV_PATH="$HOME/.ssh/id_ed25519_work"
WORK_PUB_PATH="$HOME/.ssh/id_ed25519_work.pub"

write_key() {
  title="$1"; priv_path="$2"; pub_path="$3"
  if [ -f "$priv_path" ]; then
    chmod 600 "$priv_path" || true
    if [ ! -f "$pub_path" ]; then
      if op item get "$title" --fields "public key" >/dev/null 2>&1; then
        op item get "$title" --fields "public key" > "$pub_path" && chmod 644 "$pub_path"
      elif command -v ssh-keygen >/dev/null 2>&1; then
        ssh-keygen -y -f "$priv_path" > "$pub_path" && chmod 644 "$pub_path" || true
      fi
    fi
    echo "  - kept $priv_path (already exists)"
  else
    if op item get "$title" --fields "private key" >/dev/null 2>&1; then
      tmp=$(mktemp)
      op item get "$title" --fields "private key" > "$tmp"
      install -m 600 "$tmp" "$priv_path"
      rm -f "$tmp"
      if op item get "$title" --fields "public key" >/dev/null 2>&1; then
        op item get "$title" --fields "public key" > "$pub_path" && chmod 644 "$pub_path"
      elif command -v ssh-keygen >/dev/null 2>&1; then
        ssh-keygen -y -f "$priv_path" > "$pub_path" && chmod 644 "$pub_path" || true
      fi
      echo "  - wrote $priv_path (+ .pub)"
    else
      echo "  ‚ö†Ô∏è  Could not read '$title' private key from 1Password."
    fi
  fi
}

write_key "Dev SSH Key" "$DEV_PRIV_PATH" "$DEV_PUB_PATH"
write_key "Work SSH Key" "$WORK_PRIV_PATH" "$WORK_PUB_PATH"

{{- end }}
