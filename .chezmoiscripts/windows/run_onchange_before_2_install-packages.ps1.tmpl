$ErrorActionPreference = 'Stop'

function Ensure-PackageProvider {
    param([string]$Name, [Version]$MinimumVersion)
    try {
        $provider = Get-PackageProvider -Name $Name -ErrorAction SilentlyContinue
        if (-not $provider -or $provider.Version -lt $MinimumVersion) {
            Install-PackageProvider -Name $Name -MinimumVersion $MinimumVersion -Force -Scope CurrentUser *>$null
        }
    } catch {
        Write-Host ("[WARN] Failed to ensure package provider '{0}': {1}" -f $Name, $_.Exception.Message)
    }
}

function Ensure-Module {
    param(
        [Parameter(Mandatory)] [string]$Name,
        [string]$MinimumVersion
    )

    try {
        $module = Get-Module -ListAvailable -Name $Name | Sort-Object Version -Descending | Select-Object -First 1
        $needsInstall = -not $module
        if (-not $needsInstall -and $MinimumVersion) {
            $needsInstall = ([Version]$module.Version -lt [Version]$MinimumVersion)
        }

        if ($needsInstall) {
            $installParams = @{ Name = $Name; Scope = 'CurrentUser'; Force = $true; AllowClobber = $true }
            if ($MinimumVersion) { $installParams['MinimumVersion'] = $MinimumVersion }
            Install-Module @installParams -ErrorAction Stop
            Write-Host ("[OK] Installed PowerShell module '{0}'." -f $Name)
        } else {
            Write-Host ("[INFO] PowerShell module '{0}' already present (v{1})." -f $Name, $module.Version)
        }
    } catch {
        Write-Host ("[WARN] Failed to install PowerShell module '{0}': {1}" -f $Name, $_.Exception.Message)
    }
}

function Test-CaskaydiaFont {
    $fontDirs = @(
        (Join-Path $env:WINDIR 'Fonts'),
        (Join-Path $env:LOCALAPPDATA 'Microsoft\Windows\Fonts')
    )

    foreach ($dir in $fontDirs) {
        if (-not (Test-Path $dir)) { continue }
        try {
            $match = Get-ChildItem -Path $dir -Filter 'CaskaydiaCove*NerdFont*.ttf' -ErrorAction Stop | Select-Object -First 1
            if ($match) { return $true }
        } catch {}
    }

    foreach ($registryPath in @('HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Fonts', 'HKCU:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Fonts')) {
        try {
            $values = Get-ItemProperty -Path $registryPath -ErrorAction Stop
            foreach ($name in $values.PSObject.Properties.Name) {
                if ($name -match 'CaskaydiaCove' -and $name -match 'Nerd Font') {
                    return $true
                }
            }
        } catch {}
    }

    return $false
}

$packages = @(
    "BurntSushi.ripgrep.MSVC"
    "Docker.DockerDesktop"
    "Git.Git"
    "GitHub.cli"
    "Google.Chrome"
    "Postman.Postman"
    "Microsoft.PowerShell"
    "Microsoft.WindowsTerminal"
    "SlackTechnologies.Slack"
    "Vim.Vim"
    "JanDeDobbeleer.OhMyPosh"
    "jqlang.jq"
)

{{- if not .is_work_machine }}
$packages += "OpenAI.ChatGPT"
$packages += "Anthropic.Claude"
{{- end }}

foreach ($pkg in ($packages | Sort-Object -Unique)) {
    Write-Host "=== $pkg ==="

    $existingJson = winget list --id $pkg --exact --source winget --accept-source-agreements --accept-package-agreements --output json 2>$null
    $installed = $false

    if ($LASTEXITCODE -eq 0 -and $existingJson) {
        try {
            $existing = $existingJson | ConvertFrom-Json -ErrorAction Stop

            $records = @()

            if ($existing) {
                if ($existing -is [System.Collections.IEnumerable] -and -not ($existing -is [string])) {
                    $records += $existing
                }

                $propertyNames = @('Data', 'Records', 'Results', 'Sources', 'SourcesAndPackages', 'Packages', 'Installed', 'Values', 'Items')
                foreach ($prop in $propertyNames) {
                    if ($existing.PSObject.Properties.Name -contains $prop) {
                        $value = $existing.$prop
                        if ($value) {
                            if ($value -is [System.Collections.IEnumerable] -and -not ($value -is [string])) {
                                $records += $value
                            } else {
                                $records += ,$value
                            }
                        }
                    }
                }

                if (-not $records -and ($existing.PSObject.Properties.Name -contains 'PackageIdentifier' -or $existing.PSObject.Properties.Name -contains 'Id' -or $existing.PSObject.Properties.Name -contains 'Name')) {
                    $records += $existing
                }

                foreach ($record in $records) {
                    if ($null -eq $record) { continue }

                    $identifier = $record.PackageIdentifier
                    if (-not $identifier -and $record.PSObject.Properties.Name -contains 'Id') {
                        $identifier = $record.Id
                    }
                    if (-not $identifier -and $record.PSObject.Properties.Name -contains 'Name') {
                        $identifier = $record.Name
                    }
                    if (-not $identifier -and $record.PSObject.Properties.Name -contains 'Identifier') {
                        $identifier = $record.Identifier
                    }

                    if ($identifier -eq $pkg) {
                        $installed = $true
                        break
                    }
                }
            }
        } catch {
            Write-Host "[WARN] Unable to parse winget list output for $pkg; attempting installation anyway."
        }
    }

    if ($installed) {
        Write-Host "[INFO] $pkg already installed; skipping."
        if ($pkg -eq 'Microsoft.PowerShell') {
            Ensure-PackageProvider -Name 'NuGet' -MinimumVersion ([Version]'2.8.5.201')
            Ensure-Module -Name 'PSReadLine' -MinimumVersion '2.2.6'
            Ensure-Module -Name 'posh-git' -MinimumVersion '1.1.0'
            Ensure-Module -Name 'Terminal-Icons' -MinimumVersion '0.9.0'
        }
        continue
    }

    Write-Host "[ACTION] Installing $pkg..."
    winget install -e --id $pkg --accept-source-agreements --accept-package-agreements --silent

    if ($pkg -eq 'Microsoft.PowerShell') {
        Ensure-PackageProvider -Name 'NuGet' -MinimumVersion ([Version]'2.8.5.201')
        Ensure-Module -Name 'PSReadLine' -MinimumVersion '2.2.6'
        Ensure-Module -Name 'posh-git' -MinimumVersion '1.1.0'
        Ensure-Module -Name 'Terminal-Icons' -MinimumVersion '0.9.0'
        if (-not (Test-CaskaydiaFont)) {
            Write-Host "[WARN] CaskaydiaCove Nerd Font not detected. Download 'Caskaydia Cove' from https://www.nerdfonts.com/font-downloads, then right-click 'CaskaydiaCoveNerdFontMono-Regular.ttf' > Show more options > Install for all users, and set Windows Terminal to use 'CaskaydiaCove NF'."
        }
    }
}
