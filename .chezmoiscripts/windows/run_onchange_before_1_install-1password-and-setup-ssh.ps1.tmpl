$ErrorActionPreference = 'Stop'

function Test-Command { param([string]$Name) Get-Command $Name -ErrorAction SilentlyContinue | Out-Null }

function Ensure-WindowsOpenSSH {
  $sshPath = Join-Path $env:SystemRoot 'System32\OpenSSH\ssh.exe'
  if (Test-Path $sshPath) {
    Write-Host ' Windows OpenSSH Client already installed.'
    return
  }

  Write-Host ' Installing Windows OpenSSH Client capability...'
  try {
    $capability = Get-WindowsCapability -Online -Name 'OpenSSH.Client~~~~0.0.1.0' -ErrorAction Stop
    if ($capability.State -ne 'Installed') {
      Add-WindowsCapability -Online -Name $capability.Name *>$null
      Write-Host ' Windows OpenSSH Client installed.'
    } else {
      Write-Host ' Windows OpenSSH Client reported as installed after check.'
    }
  } catch {
    Write-Host ('  [WARN] Unable to ensure Windows OpenSSH Client: {0}' -f $_.Exception.Message)
  }
}

Ensure-WindowsOpenSSH

$ProgressPreference = 'SilentlyContinue'

$opExists = Test-Command op
$desktopExists = Test-Command '1Password'

if (-not $desktopExists) {
  winget install 1password --accept-source-agreements --accept-package-agreements --silent
}

if (-not $opExists) {
  winget install 1password-cli --accept-source-agreements --accept-package-agreements --silent
}

# After installation, winget adds to PATH but it doesn't take effect in current session
# Find 1Password executable dynamically and add to PATH persistently
function Add-1PasswordToPath {
  $1passwordAppPath = Get-ChildItem -Path "$env:LOCALAPPDATA\1Password\app" -Directory -ErrorAction SilentlyContinue |
    Sort-Object Name -Descending | Select-Object -First 1
  
  if ($1passwordAppPath -and (Test-Path (Join-Path $1passwordAppPath.FullName '1Password.exe'))) {
    $appDir = $1passwordAppPath.FullName
    
    # Add to current session
    $env:PATH = "$appDir;$env:PATH"
    
    # Add to user PATH persistently via registry
    try {
      $userPath = [Environment]::GetEnvironmentVariable('PATH', 'User')
      
      # Remove old 1Password version paths (e.g., when upgrading from v8 to v9)
      $pathEntries = $userPath -split ';' | Where-Object { $_ }
      $old1PassPaths = $pathEntries | Where-Object { $_ -like "*\1Password\app\*" -and $_ -ne $appDir }
      
      if ($old1PassPaths) {
        foreach ($oldPath in $old1PassPaths) {
          $userPath = $userPath.Replace("$oldPath;", "").Replace(";$oldPath", "").Replace($oldPath, "")
          Write-Host (" Removed old 1Password path from User PATH: $oldPath")
        }
      }
      
      if ($userPath -notlike "*$appDir*") {
        $newPath = "$appDir;$userPath"
        [Environment]::SetEnvironmentVariable('PATH', $newPath, 'User')
        Write-Host (" Added 1Password (version $($1passwordAppPath.Name)) to User PATH persistently.")
      } else {
        Write-Host (" 1Password (version $($1passwordAppPath.Name)) already in User PATH.")
      }
    } catch {
      Write-Host (" [WARN] Could not persist to User PATH: {0}" -f $_.Exception.Message)
      Write-Host (" Added to current session only.")
    }
  }
}

Add-1PasswordToPath

function Ensure-OpSshKey {
  param([string]$Title, [string]$Purpose)
  Write-Host (" Checking for SSH key '{0}' in 1Password..." -f $Title)
  try {
    op item get $Title --fields 'public key' *>$null
    if ($LASTEXITCODE -eq 0) {
      Write-Host (" SSH key '{0}' found in 1Password." -f $Title)
      try {
        $creationDate = op item get $Title --fields 'Creation Date' 2>$null
        if ($creationDate) { Write-Host ("    Created: {0}" -f $creationDate) }
      } catch {}
      return
    }
  } catch {}

  Write-Host (" [WARN] SSH key '{0}' not found in 1Password." -f $Title)
  Write-Host ""
  $createKey = Read-Host (" Would you like to create '{0}' now? (y/N)" -f $Title)
  if ($createKey -match "^[Yy]$") {
    Write-Host (" Creating new Ed25519 key: {0}..." -f $Title)
    $creationDate = (Get-Date).ToUniversalTime().ToString("yyyy-MM-dd HH:mm:ss UTC")
    try {
      op item create --category 'SSH Key' --title $Title --ssh-generate-key ed25519 ("Creation Date[text]={0}" -f $creationDate) ("Purpose[text]={0}" -f $Purpose) *>$null
      Write-Host " [OK] SSH key created successfully!"
      Write-Host ""
      Write-Host (" [KEY] Public key for GitHub ({0}):" -f $Title)
      Write-Host "========================================================================="
      op item get $Title --fields 'public key'
      Write-Host "========================================================================="
      Write-Host ""
      Write-Host ' Next steps - Add this key to GitHub TWICE:'
      Write-Host '  1. Go to https://github.com/settings/keys'
      Write-Host '  2. Click "New SSH key" -> Add as "Authentication Key"'
      Write-Host '  3. Click "New SSH key" again -> Add as "Signing Key"'
      Write-Host ""
      Write-Host -NoNewline ' Press any key after adding the key to GitHub (both auth & signing)...'
      $null = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")
      Write-Host ""
    } catch {
      Write-Host (" Failed to create SSH key '{0}'." -f $Title)
      Write-Host (" Machine setup requires '{0}'. Exiting now..." -f $Title)
      exit 1
    }
  } else {
    Write-Host (" Skipping '{0}' creation. Machine setup requires this key. Exiting now..." -f $Title)
    exit 1
  }
}

function Ensure-Key {
  param([string]$Title,[string]$Priv,[string]$Pub)
  $placeholderPattern = "use 'op item get"

  if (Test-Path $Priv) {
    $isPlaceholder = $false
    try { $isPlaceholder = Select-String -Path $Priv -Pattern $placeholderPattern -SimpleMatch -Quiet } catch { $isPlaceholder = $false }
    if (-not $isPlaceholder) {
      try { icacls $Priv /inheritance:r *>$null; icacls $Priv /grant:r "$env:USERNAME:(R,W)" *>$null } catch {}
      if (-not (Test-Path $Pub)) {
        try {
          $pubKey = op item get $Title --fields 'public key' --reveal
          if ($LASTEXITCODE -eq 0 -and $pubKey) { Set-Content -Path $Pub -Value $pubKey -Encoding ascii }
        } catch {}
      }
      Write-Host ("  - kept {0} (already exists)" -f $Priv)
      return
    }

    Write-Host ("  - detected placeholder content in {0}, refreshing from 1Password" -f $Priv)
  }

  try {
    $privKey = op item get $Title --fields 'private key' --reveal
    if ($LASTEXITCODE -eq 0 -and $privKey) {
      Set-Content -Path $Priv -Value $privKey -Encoding ascii
      try { icacls $Priv /inheritance:r *>$null; icacls $Priv /grant:r "$env:USERNAME:(R,W)" *>$null } catch {}
      try {
        $pubKey = op item get $Title --fields 'public key' --reveal
        if ($LASTEXITCODE -eq 0 -and $pubKey) { Set-Content -Path $Pub -Value $pubKey -Encoding ascii }
      } catch {}
      Write-Host ("  - wrote {0} (+ .pub if available)" -f $Priv)
    } else {
      Write-Host ("  [WARN] Could not read '{0}' private key from 1Password." -f $Title)
    }
  } catch {
    Write-Host ("  [WARN] Could not read '{0}' private key from 1Password." -f $Title)
  }
}

try {
  Write-Host ""
  Write-Host ' Opening 1Password...'
  
  # Try to start 1Password - use .exe extension and check if command exists
  $1passwordCmd = Get-Command '1Password.exe' -ErrorAction SilentlyContinue
  if ($1passwordCmd) {
    try {
      Start-Process '1Password.exe' -ErrorAction Stop
      Write-Host '  1Password is starting...'
    } catch {
      Write-Host ('  [WARN] Could not automatically open 1Password: {0}' -f $_.Exception.Message)
      Write-Host '  Please open 1Password manually now.'
    }
  } else {
    Write-Host '  [WARN] Could not find 1Password.exe in PATH. Please open 1Password manually.'
  }

  Write-Host ""
  Write-Host ' In 1Password, please enable these settings:'
  Write-Host '  1. Settings -> Developer -> [x] "Integrate with 1Password CLI"'
  Write-Host '  2. Ensure 1Password is unlocked'
  Write-Host ""
  Write-Host -NoNewline ' Press any key when finished...'
  $null = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")
  Write-Host ""

  try {
    op account list *>$null
    Write-Host ' 1Password CLI can see your accounts.'
  } catch {
    Write-Host "   'op account list' didn't succeed. 1Password integration is required for machine setup."
    exit 1
  }

  Ensure-OpSshKey -Title 'Dev SSH Key' -Purpose 'Development machine SSH authentication and Git signing'
  {{- if .is_work_machine }}
  Ensure-OpSshKey -Title 'Work SSH Key' -Purpose 'Work machine SSH authentication and Git signing'
  {{- end }}

  Write-Host ' Ensuring SSH keys exist in ~/.ssh for host selection...'
  $sshDir = Join-Path $env:USERPROFILE '.ssh'
  New-Item -ItemType Directory -Path $sshDir -Force *>$null

  $devPriv = Join-Path $sshDir 'id_ed25519_dev'
  $devPub  = Join-Path $sshDir 'id_ed25519_dev.pub'
  $workPriv = Join-Path $sshDir 'id_ed25519_work'
  $workPub  = Join-Path $sshDir 'id_ed25519_work.pub'

  Ensure-Key -Title "Dev SSH Key" -Priv $devPriv -Pub $devPub
  {{- if .is_work_machine }}
  Ensure-Key -Title "Work SSH Key" -Priv $workPriv -Pub $workPub
  {{- end }}

  Write-Host ' Checking for SSH hosts configuration...'
  try {
    op item get 'ssh-hosts' --fields 'hosts' *>$null
    Write-Host '  SSH hosts configuration found in 1Password.'
  } catch {
    Write-Host ("   SSH hosts configuration '{0}' not found." -f 'ssh-hosts')
    Write-Host ""
    $createHosts = Read-Host ' Would you like to create it now? (y/N)'
    if ($createHosts -match "^[Yy]$") {
      $hostsTemplateLines = @(
        "# Add your custom SSH host configurations here",
        "# Example:",
        "# Host myserver",
        "#     HostName 192.168.1.100",
        "#     User myuser",
        "#     Port 22"
      )
      $hostsTemplate = $hostsTemplateLines -join "`n"
      try {
        op item create --category 'Secure Note' --title 'ssh-hosts' ("hosts={0}" -f $hostsTemplate) *>$null
        Write-Host '  SSH hosts configuration created with template.'
      } catch {
        Write-Host '  Failed to create SSH hosts configuration.'
      }
    }
  }

} catch {
  Write-Host ""
  Write-Host (' [ERROR] Unexpected error during 1Password setup: {0}' -f $_.Exception.Message)
  Write-Host ' Please report this error. Machine setup cannot continue without 1Password integration.'
  exit 1
}
