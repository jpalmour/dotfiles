$ErrorActionPreference = 'Stop'

function Test-Command { param([string]$Name) Get-Command $Name -ErrorAction SilentlyContinue | Out-Null }

$ProgressPreference = 'SilentlyContinue'

$opExists = Test-Command op
$desktopExists = Test-Command 1Password

if (-not $desktopExists) {
  winget install 1password --accept-source-agreements --accept-package-agreements --silent
}

if (-not $opExists) {
  winget install 1password-cli --accept-source-agreements --accept-package-agreements --silent
}

function Ensure-OpSshKey {
  param([string]$Title, [string]$Purpose)
  Write-Host " Checking for SSH key '$Title' in 1Password..."
  try {
    op item get $Title --fields "public key" *>$null
    if ($LASTEXITCODE -eq 0) {
      Write-Host " ‚úÖ SSH key '$Title' found in 1Password."
      try {
        $creationDate = op item get $Title --fields "Creation Date" 2>$null
        if ($creationDate) { Write-Host "    Created: $creationDate" }
      } catch {}
      return
    }
  } catch {}

  Write-Host " ‚ö†Ô∏è  SSH key '$Title' not found in 1Password."
  Write-Host ""
  $createKey = Read-Host " Would you like to create '$Title' now? (y/N)"
  if ($createKey -match "^[Yy]$") {
    Write-Host " Creating new Ed25519 key: $Title..."
    $creationDate = (Get-Date).ToUniversalTime().ToString("yyyy-MM-dd HH:mm:ss UTC")
    try {
      op item create --category "SSH Key" --title $Title --ssh-generate-key ed25519 "Creation Date[text]=$creationDate" "Purpose[text]=$Purpose" *>$null
      Write-Host " ‚úÖ SSH key created successfully!"
      Write-Host ""
      Write-Host " üîë Public key for GitHub ($Title):"
      Write-Host "========================================================================="
      op item get $Title --fields "public key"
      Write-Host "========================================================================="
      Write-Host ""
      Write-Host " üìã Next steps - Add this key to GitHub TWICE:"
      Write-Host "  1. Go to https://github.com/settings/keys"
      Write-Host "  2. Click 'New SSH key' ‚Üí Add as 'Authentication Key'"
      Write-Host "  3. Click 'New SSH key' again ‚Üí Add as 'Signing Key'"
      Write-Host ""
      Write-Host -NoNewline " Press any key after adding the key to GitHub (both auth & signing)..."
      $null = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")
      Write-Host ""
    } catch {
      Write-Host " ‚ùå Failed to create SSH key '$Title'."
      Write-Host " Machine setup requires '$Title'. Exiting now..."
      exit 1
    }
  } else {
    Write-Host " Skipping '$Title' creation. Machine setup requires this key. Exiting now..."
    exit 1
  }
}

function Ensure-Key {
  param([string]$Title,[string]$Priv,[string]$Pub)
  if (Test-Path $Priv) {
    try { icacls $Priv /inheritance:r *>$null; icacls $Priv /grant:r "$env:USERNAME:(R,W)" *>$null } catch {}
    if (-not (Test-Path $Pub)) {
      try {
        $pubKey = op item get $Title --fields "public key"
        if ($LASTEXITCODE -eq 0 -and $pubKey) { Set-Content -Path $Pub -Value $pubKey -Encoding ascii }
      } catch {}
    }
    Write-Host "  - kept $Priv (already exists)"
  } else {
    try {
      $privKey = op item get $Title --fields "private key"
      if ($LASTEXITCODE -eq 0 -and $privKey) {
        Set-Content -Path $Priv -Value $privKey -Encoding ascii
        try { icacls $Priv /inheritance:r *>$null; icacls $Priv /grant:r "$env:USERNAME:(R,W)" *>$null } catch {}
        try {
          $pubKey = op item get $Title --fields "public key"
          if ($LASTEXITCODE -eq 0 -and $pubKey) { Set-Content -Path $Pub -Value $pubKey -Encoding ascii }
        } catch {}
        Write-Host "  - wrote $Priv (+ .pub if available)"
      } else {
        Write-Host "  ‚ö†Ô∏è  Could not read '$Title' private key from 1Password."
      }
    } catch {
      Write-Host "  ‚ö†Ô∏è  Could not read '$Title' private key from 1Password."
    }
  }
}

try {
  Write-Host ""
  Write-Host " Opening 1Password‚Ä¶"
  Start-Process "1password" -ErrorAction SilentlyContinue

  Write-Host " In 1Password, please enable these settings:"
  Write-Host "  1. Settings ‚Üí Developer ‚Üí ‚úÖ 'Integrate with 1Password CLI'"
  Write-Host "  2. Settings ‚Üí Developer ‚Üí ‚úÖ 'Use the SSH agent'"
  Write-Host ""
  Write-Host -NoNewline " Press any key when finished..."
  $null = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")
  Write-Host ""

  try {
    op account list *>$null
    Write-Host " ‚úÖ 1Password CLI can see your accounts."
  } catch {
    Write-Host " ‚ö†Ô∏è  'op account list' didn't succeed. 1Password integration is required for machine setup."
    exit 1
  }

  Ensure-OpSshKey -Title "Dev SSH Key" -Purpose "Development machine SSH authentication and Git signing"
  {{- if .is_work_machine }}
  Ensure-OpSshKey -Title "Work SSH Key" -Purpose "Work machine SSH authentication and Git signing"
  {{- end }}

  Write-Host " Ensuring SSH keys exist in ~/.ssh for host selection..."
  $sshDir = Join-Path $env:USERPROFILE ".ssh"
  New-Item -ItemType Directory -Path $sshDir -Force *>$null

  $devPriv = Join-Path $sshDir "id_ed25519_dev"
  $devPub  = Join-Path $sshDir "id_ed25519_dev.pub"
  $workPriv = Join-Path $sshDir "id_ed25519_work"
  $workPub  = Join-Path $sshDir "id_ed25519_work.pub"

  Ensure-Key -Title "Dev SSH Key" -Priv $devPriv -Pub $devPub
  {{- if .is_work_machine }}
  Ensure-Key -Title "Work SSH Key" -Priv $workPriv -Pub $workPub
  {{- end }}

  Write-Host " Checking for SSH hosts configuration..."
  try {
    op item get "ssh-hosts" --fields "hosts" *>$null
    Write-Host " ‚úÖ SSH hosts configuration found in 1Password."
  } catch {
    Write-Host " ‚ö†Ô∏è  SSH hosts configuration 'ssh-hosts' not found."
    Write-Host ""
    $createHosts = Read-Host " Would you like to create it now? (y/N)"
    if ($createHosts -match "^[Yy]$") {
      $hostsTemplate = @"
# Add your custom SSH host configurations here
# Example:
# Host myserver
#     HostName 192.168.1.100
#     User myuser
#     Port 22
"@
      try {
        op item create --category "Secure Note" --title "ssh-hosts" "hosts=$hostsTemplate" *>$null
        Write-Host " ‚úÖ SSH hosts configuration created with template."
      } catch {
        Write-Host " ‚ùå Failed to create SSH hosts configuration."
      }
    }
  }

} catch {
  Write-Host " Skipping 1Password app setup prompt due to error: $($_.Exception.Message)"
  exit 1
}
