$ErrorActionPreference = 'Stop'

function Test-Command { param([string]$Name) Get-Command $Name -ErrorAction SilentlyContinue | Out-Null }

$opExists = Test-Command op
$desktopExists = (Get-Item "C:\\Program Files\\1Password\\1Password.exe" -ErrorAction SilentlyContinue) -ne $null -or \
                 (Get-Item "$env:LOCALAPPDATA\\1Password\\app\\*\\1Password.exe" -ErrorAction SilentlyContinue) -ne $null

if (-not $opExists -or -not $desktopExists) {
    if (Test-Command winget) {
        winget install -e --id AgileBits.1Password --accept-source-agreements --accept-package-agreements --silent
        winget install -e --id AgileBits.1Password.CLI --accept-source-agreements --accept-package-agreements --silent
    } else {
        if (-not (Test-Command choco)) {
            Set-ExecutionPolicy Bypass -Scope Process -Force
            [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.SecurityProtocolType]::Tls12
            Invoke-Expression ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
        }
        choco install -y 1password
        choco install -y 1password-cli
    }
}

# --- prompt user to enable CLI integration and SSH agent --------------------
try {
  Write-Host ""
  Write-Host " Opening 1Password‚Ä¶"
  $paths = @(
    "$env:ProgramFiles\1Password\1Password.exe",
    "$env:LOCALAPPDATA\1Password\app\*\1Password.exe"
  )
  $app = Get-ChildItem -Path $paths -ErrorAction SilentlyContinue | Select-Object -First 1
  if ($app) { Start-Process -FilePath $app.FullName } else { Start-Process "1Password" -ErrorAction SilentlyContinue }

  Write-Host " In 1Password, please enable these settings:"
  Write-Host "  1. Settings ‚Üí Developer ‚Üí ‚úÖ 'Integrate with 1Password CLI'"
  Write-Host "  2. Settings ‚Üí Developer ‚Üí ‚úÖ 'Use the SSH agent'"
  Write-Host ""
  Write-Host -NoNewline " Press any key when finished..."
  $null = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")
  Write-Host ""

  try {
    op account list *>$null
    Write-Host " ‚úÖ 1Password CLI can see your accounts."
  } catch {
    Write-Host " ‚ö†Ô∏è  'op account list' didn't succeed. 1Password integration is required for machine setup."
    exit 1
  }

  # Check for SSH key and offer to create if missing
  Write-Host " Checking for SSH key in 1Password..."
  try {
    op item get "Dev SSH Key" --fields "public key" *>$null
    Write-Host " ‚úÖ SSH key 'Dev SSH Key' found in 1Password."
    try {
      $creationDate = op item get "Dev SSH Key" --fields "Creation Date" 2>$null
      if ($creationDate) { Write-Host "    Created: $creationDate" }
    } catch {}
  } catch {
    Write-Host " ‚ö†Ô∏è  SSH key 'Dev SSH Key' not found in 1Password."
    Write-Host ""
    $createKey = Read-Host " Would you like to create a new SSH key now? (y/N)"
    if ($createKey -match "^[Yy]$") {
      Write-Host " Creating new Ed25519 SSH key..."
      $creationDate = (Get-Date).ToUniversalTime().ToString("yyyy-MM-dd HH:mm:ss UTC")
      try {
        op item create --category "SSH Key" --title "Dev SSH Key" --ssh-generate-key ed25519 "Creation Date[text]=$creationDate" "Purpose[text]=Development machine SSH authentication and Git signing" *>$null
        Write-Host " ‚úÖ SSH key created successfully!"
        Write-Host ""
        Write-Host " üîë Public key for GitHub:"
        Write-Host "========================================================================="
        op item get "Dev SSH Key" --fields "public key"
        Write-Host "========================================================================="
        Write-Host ""
        Write-Host " üìã Next steps - Add this key to GitHub TWICE:"
        Write-Host "  1. Go to https://github.com/settings/keys"
        Write-Host "  2. Click 'New SSH key' ‚Üí Add as 'Authentication Key'"
        Write-Host "  3. Click 'New SSH key' again ‚Üí Add as 'Signing Key'"
        Write-Host ""
        Write-Host -NoNewline " Press any key after adding the key to GitHub (both auth & signing)..."
        $null = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")
        Write-Host ""
      } catch {
        Write-Host " ‚ùå Failed to create SSH key. Please create it manually:"
        Write-Host " Run: op item create --category `"SSH Key`" --title `"Dev SSH Key`" --ssh-generate-key ed25519"
      }
    } else {
      Write-Host " Skipping SSH key creation. You can create it manually later."
      Write-Host " See 1PASS_SETUP.md for instructions."
    }
  }

  # Check for ssh-hosts and offer to create if missing
  Write-Host " Checking for SSH hosts configuration..."
  try {
    op item get "ssh-hosts" --fields "hosts" *>$null
    Write-Host " ‚úÖ SSH hosts configuration found in 1Password."
  } catch {
    Write-Host " ‚ö†Ô∏è  SSH hosts configuration 'ssh-hosts' not found."
    Write-Host ""
    $createHosts = Read-Host " Would you like to create it now? (y/N)"
    if ($createHosts -match "^[Yy]$") {
      $hostsTemplate = @"
{{- if .is_work_machine -}}
Host github.com
    HostName github.com
    User git
    IdentitiesOnly yes
    IdentityFile "~/.ssh/id_ed25519_work"

Host github-personal.com
    HostName github.com
    User git
    IdentitiesOnly yes
    IdentityFile "~/.ssh/id_ed25519_dev"
{{- else -}}
# Add your custom SSH host configurations here
# Example:
# Host myserver
#     HostName 192.168.1.100
#     User myuser
#     Port 22
{{- end }}
"@
      try {
        op item create --category "Secure Note" --title "ssh-hosts" "hosts=$hostsTemplate" *>$null
        Write-Host " ‚úÖ SSH hosts configuration created with template."
      } catch {
        Write-Host " ‚ùå Failed to create SSH hosts configuration."
      }
    }
  }

  # Create WORK SSH Key if missing (work machines only)
  {{- if .is_work_machine }}
  Write-Host " Checking for WORK SSH key in 1Password..."
  try {
    op item get "Work SSH Key" --fields "public key" *>$null
    Write-Host " ‚úÖ WORK SSH key 'Work SSH Key' found in 1Password."
    try {
      $creationDate = op item get "Work SSH Key" --fields "Creation Date" 2>$null
      if ($creationDate) { Write-Host "    Created: $creationDate" }
    } catch {}
  } catch {
    Write-Host " ‚ö†Ô∏è  SSH key 'Work SSH Key' not found in 1Password."
    Write-Host ""
    $createKey = Read-Host " Would you like to create a new WORK SSH key now? (y/N)"
    if ($createKey -match "^[Yy]$") {
      Write-Host " Creating new Ed25519 WORK SSH key..."
      $creationDate = (Get-Date).ToUniversalTime().ToString("yyyy-MM-dd HH:mm:ss UTC")
      try {
        op item create --category "SSH Key" --title "Work SSH Key" --ssh-generate-key ed25519 "Creation Date[text]=$creationDate" "Purpose[text]=Work machine SSH authentication and Git signing" *>$null
        Write-Host " ‚úÖ Work SSH key created successfully!"
        Write-Host ""
        Write-Host " üîë Public key for GitHub (WORK):"
        Write-Host "========================================================================="
        op item get "Work SSH Key" --fields "public key"
        Write-Host "========================================================================="
        Write-Host ""
        Write-Host " üìã Next steps - Add this WORK key to GitHub TWICE (work account):"
        Write-Host "  1. Go to https://github.com/settings/keys"
        Write-Host "  2. Click 'New SSH key' ‚Üí Add as 'Authentication Key'"
        Write-Host "  3. Click 'New SSH key' again ‚Üí Add as 'Signing Key'"
        Write-Host ""
        Write-Host -NoNewline " Press any key after adding the WORK key to GitHub (both auth & signing)..."
        $null = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")
        Write-Host ""
      } catch {
        Write-Host " ‚ùå Failed to create WORK SSH key. Please create it manually:"
        Write-Host " Run: op item create --category `"SSH Key`" --title `"Work SSH Key`" --ssh-generate-key ed25519"
      }
    } else {
      Write-Host " Skipping WORK SSH key creation. You can create it manually later."
    }
  }
  {{- end }}

  # Write private keys (and .pub) for host selection on work machines
  {{- if .is_work_machine }}
  Write-Host " Ensuring SSH keys exist in ~/.ssh for host selection..."
  $sshDir = Join-Path $env:USERPROFILE ".ssh"
  New-Item -ItemType Directory -Path $sshDir -Force *>$null

  $devPriv = Join-Path $sshDir "id_ed25519_dev"
  $devPub  = Join-Path $sshDir "id_ed25519_dev.pub"
  $workPriv = Join-Path $sshDir "id_ed25519_work"
  $workPub  = Join-Path $sshDir "id_ed25519_work.pub"

  function Ensure-Key {
    param([string]$Title,[string]$Priv,[string]$Pub)
    if (Test-Path $Priv) {
      try { icacls $Priv /inheritance:r *>$null; icacls $Priv /grant:r "$env:USERNAME:(R,W)" *>$null } catch {}
      if (-not (Test-Path $Pub)) {
        try {
          $pubKey = op item get $Title --fields "public key"
          if ($LASTEXITCODE -eq 0 -and $pubKey) { Set-Content -Path $Pub -Value $pubKey -Encoding ascii }
        } catch {}
      }
      Write-Host "  - kept $Priv (already exists)"
    } else {
      try {
        $privKey = op item get $Title --fields "private key"
        if ($LASTEXITCODE -eq 0 -and $privKey) {
          Set-Content -Path $Priv -Value $privKey -Encoding ascii
          try { icacls $Priv /inheritance:r *>$null; icacls $Priv /grant:r "$env:USERNAME:(R,W)" *>$null } catch {}
          try {
            $pubKey = op item get $Title --fields "public key"
            if ($LASTEXITCODE -eq 0 -and $pubKey) { Set-Content -Path $Pub -Value $pubKey -Encoding ascii }
          } catch {}
          Write-Host "  - wrote $Priv (+ .pub if available)"
        } else {
          Write-Host "  ‚ö†Ô∏è  Could not read '$Title' private key from 1Password."
        }
      } catch {
        Write-Host "  ‚ö†Ô∏è  Could not read '$Title' private key from 1Password."
      }
    }
  }

  Ensure-Key "Dev SSH Key" $devPriv $devPub
  Ensure-Key "Work SSH Key" $workPriv $workPub
  {{- end }}

} catch {
  Write-Host " Skipping 1Password app setup prompt due to error: $($_.Exception.Message)"
  exit 1
}
