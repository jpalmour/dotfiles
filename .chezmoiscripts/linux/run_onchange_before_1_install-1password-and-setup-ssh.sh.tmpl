#!/bin/bash
set -e

# Select 1Password CLI binary depending on environment, and validate early for WSL
{{- if .is_wsl }}
OP_BIN="op.exe"

if ! command -v "${OP_BIN}" >/dev/null 2>&1; then
  echo
  echo " ⚠️  1Password for Windows CLI (op.exe) not found in PATH."
  echo "     Please run 'chezmoi apply' in a Windows terminal first to install."
  exit 1
fi
if ! "${OP_BIN}" account list >/dev/null 2>&1; then
  echo
  echo " ⚠️  '${OP_BIN} account list' didn't succeed. 1Password CLI integration is required under WSL."
  echo "     Open 1Password in Windows, enable Developer settings, unlock it, then re-run."
  exit 1
fi
echo " ✅ WSL: 1Password CLI available and integrated."
exit 0
{{- else }}
OP_BIN="op"
{{- end }}

# Ensure keyring exists and is up to date (no interactive overwrite)
KEYRING_PATH=/usr/share/keyrings/1password-archive-keyring.gpg
TMP_ASC=$(mktemp)
curl -sS https://downloads.1password.com/linux/keys/1password.asc -o "$TMP_ASC"

if [ ! -f "$KEYRING_PATH" ]; then
    gpg --dearmor --output /tmp/1password-archive-keyring.gpg "$TMP_ASC"
    sudo install -m 0644 /tmp/1password-archive-keyring.gpg "$KEYRING_PATH"
    rm -f /tmp/1password-archive-keyring.gpg
    NEED_APT_UPDATE=1
else
    gpg --dearmor --output /tmp/1password-archive-keyring.gpg "$TMP_ASC"
    if ! sudo cmp -s /tmp/1password-archive-keyring.gpg "$KEYRING_PATH"; then
        sudo install -m 0644 /tmp/1password-archive-keyring.gpg "$KEYRING_PATH"
        NEED_APT_UPDATE=1
    fi
    rm -f /tmp/1password-archive-keyring.gpg
fi
rm -f "$TMP_ASC"

# Ensure apt source list is present and correct
ARCH=$(dpkg --print-architecture)
LIST_LINE="deb [arch=${ARCH} signed-by=/usr/share/keyrings/1password-archive-keyring.gpg] https://downloads.1password.com/linux/debian/${ARCH} stable main"
LIST_PATH=/etc/apt/sources.list.d/1password.list
if [ ! -f "$LIST_PATH" ] || ! grep -Fxq "$LIST_LINE" "$LIST_PATH"; then
    echo "$LIST_LINE" | sudo tee "$LIST_PATH" >/dev/null
    NEED_APT_UPDATE=1
fi

# Ensure debsig policy and keyring exist
sudo mkdir -p /etc/debsig/policies/AC2D62742012EA22/
POLICY_PATH=/etc/debsig/policies/AC2D62742012EA22/1password.pol
if [ ! -f "$POLICY_PATH" ]; then
    curl -sS https://downloads.1password.com/linux/debian/debsig/1password.pol | \
        sudo tee "$POLICY_PATH" >/dev/null
fi

sudo mkdir -p /usr/share/debsig/keyrings/AC2D62742012EA22
DEBSIG_KEY_PATH=/usr/share/debsig/keyrings/AC2D62742012EA22/debsig.gpg
if [ ! -f "$DEBSIG_KEY_PATH" ]; then
    curl -sS https://downloads.1password.com/linux/keys/1password.asc | \
        gpg --dearmor | sudo tee "$DEBSIG_KEY_PATH" >/dev/null
fi

# Install packages only when missing; update apt if needed
need_install=0
dpkg -s 1password >/dev/null 2>&1 || need_install=1
dpkg -s 1password-cli >/dev/null 2>&1 || need_install=1

if [ "${NEED_APT_UPDATE:-0}" -eq 1 ] || [ "$need_install" -eq 1 ]; then
    sudo apt update
fi
if [ "$need_install" -eq 1 ]; then
    sudo apt install -y 1password 1password-cli
fi

# Sanity checks
echo " verifying binaries..."
command -v 1password >/dev/null && echo " - 1password: $(command -v 1password)"
command -v "${OP_BIN}" >/dev/null && echo " - ${OP_BIN}: $(command -v ${OP_BIN})"
echo " versions:"
1password --version || true
"${OP_BIN}" --version || true

# ensure an SSH key exists in 1Password, optionally create if missing
ensure_op_ssh_key() {
  local title="$1"; local purpose="$2"

  echo " Checking for SSH key '$title' in 1Password..."
  if ! "${OP_BIN}" item get "$title" --fields "public key" >/dev/null 2>&1; then
    echo " ⚠️  SSH key '$title' not found in 1Password."
    echo
    read -p " Would you like to create '$title' now? (y/N): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
      echo " Creating new Ed25519 key: $title..."
      local creation_date
      creation_date=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
      if "${OP_BIN}" item create \
        --category "SSH Key" \
        --title "$title" \
        --ssh-generate-key ed25519 \
        "Creation Date[text]=${creation_date}" \
        "Purpose[text]=${purpose}" \
        >/dev/null 2>&1; then

        echo " ✅ SSH key created successfully!"
        echo
        echo " 🔑 Public key for GitHub ($title):"
        echo "========================================================================="
        "${OP_BIN}" item get "$title" --fields "public key"
        echo "========================================================================="
        echo
        echo " 📋 Next steps - Add this key to the appropriate GitHub account TWICE:"
        echo "  1. Go to https://github.com/settings/keys"
        echo "  2. Click 'New SSH key' → Add as 'Authentication Key'"
        echo "  3. Click 'New SSH key' again → Add as 'Signing Key'"
        echo
        read -n 1 -s -r -p " Press any key after adding the key to GitHub (both auth & signing)..."
        echo
      else
        echo " ❌ Failed to create SSH key '$title'."
        echo " Machine setup requires '$title'. Exiting now..."
        exit 1
      fi
    else
      echo " Skipping '$title' creation. Machine setup requires this key. Exiting now..."
      exit 1
    fi
  else
    echo " ✅ SSH key '$title' found in 1Password."
    local creation_date
    creation_date=$("${OP_BIN}" item get "$title" --fields "Creation Date" 2>/dev/null || echo "")
    if [ -n "$creation_date" ]; then
      echo "    Created: ${creation_date}"
    fi
  fi
}

# prompt user to enable CLI integration
if ! "${OP_BIN}" account list >/dev/null 2>&1; then
  echo
  echo "Opening 1Password…"
  nohup 1password >/dev/null 2>&1 & disown || true
  echo " In 1Password, please enable these settings:"
  echo "  1. Settings → Developer → ✅ 'Integrate with 1Password CLI'"
  echo "  2. Settings → Developer → ✅ 'Use the SSH agent'"
  echo "  3. Make sure you're signed in and the app is unlocked"
  echo
  read -n 1 -s -r -p " Press any key when finished..."
  echo
  if "${OP_BIN}" account list >/dev/null 2>&1; then
    echo " ✅ 1Password CLI is integrated."
  else
    echo " ⚠️  '${OP_BIN} account list' didn't succeed. 1Password CLI integration is necessary for machine setup."
    exit 1
  fi
else
  echo " ✅ 1Password CLI already integrated."
fi

ensure_op_ssh_key "Dev SSH Key" "Development machine SSH authentication and Git signing"
{{- if .is_work_machine }}
ensure_op_ssh_key "Work SSH Key" "Work machine SSH authentication and Git signing"
{{- end }}

echo " Ensuring SSH keys exist in ~/.ssh for host selection..."
mkdir -p "$HOME/.ssh"
chmod 700 "$HOME/.ssh"

DEV_PRIV_PATH="$HOME/.ssh/id_ed25519_dev"
DEV_PUB_PATH="$HOME/.ssh/id_ed25519_dev.pub"
WORK_PRIV_PATH="$HOME/.ssh/id_ed25519_work"
WORK_PUB_PATH="$HOME/.ssh/id_ed25519_work.pub"

write_key() {
  local title="$1" priv_path="$2" pub_path="$3"
  if [ -f "$priv_path" ]; then
    chmod 600 "$priv_path" || true
    if [ ! -f "$pub_path" ]; then
      if "${OP_BIN}" item get "$title" --fields "public key" >/dev/null 2>&1; then
        "${OP_BIN}" item get "$title" --fields "public key" > "$pub_path" && chmod 644 "$pub_path"
      elif command -v ssh-keygen >/dev/null 2>&1; then
        ssh-keygen -y -f "$priv_path" > "$pub_path" && chmod 644 "$pub_path" || true
      fi
    fi
    echo "  - kept $priv_path (already exists)"
  else
    if "${OP_BIN}" item get "$title" --fields "private key" >/dev/null 2>&1; then
      tmp=$(mktemp)
      "${OP_BIN}" item get "$title" --fields "private key" > "$tmp"
      install -m 600 "$tmp" "$priv_path"
      rm -f "$tmp"
      if "${OP_BIN}" item get "$title" --fields "public key" >/dev/null 2>&1; then
        "${OP_BIN}" item get "$title" --fields "public key" > "$pub_path" && chmod 644 "$pub_path"
      elif command -v ssh-keygen >/dev/null 2>&1; then
        ssh-keygen -y -f "$priv_path" > "$pub_path" && chmod 644 "$pub_path" || true
      fi
      echo "  - wrote $priv_path (+ .pub)"
    else
      echo "  ⚠️  Could not read '$title' private key from 1Password."
    fi
  fi
}

write_key "Dev SSH Key" "$DEV_PRIV_PATH" "$DEV_PUB_PATH"
{{- if .is_work_machine }}
write_key "Work SSH Key" "$WORK_PRIV_PATH" "$WORK_PUB_PATH"
{{- end }}

# Check for ssh-hosts and offer to create if missing
echo " Checking for SSH hosts configuration..."
if ! "${OP_BIN}" item get "ssh-hosts" --fields "hosts" >/dev/null 2>&1; then
  echo " ⚠️  SSH hosts configuration 'ssh-hosts' not found."
  echo
  read -p " Would you like to create it now? (y/N): " -n 1 -r
  echo
  if [[ $REPLY =~ ^[Yy]$ ]]; then
    # Create basic ssh-hosts configuration
    if "${OP_BIN}" item create \
      --category "Secure Note" \
      --title "ssh-hosts" \
      "hosts=# Add your custom SSH host configurations here
# Example:
# Host myserver
#     HostName 192.168.1.100
#     User myuser
#     Port 22" \
      >/dev/null 2>&1; then
      echo " ✅ SSH hosts configuration created with template."
    else
      echo " ❌ Failed to create SSH hosts configuration."
    fi
  fi
else
  echo " ✅ SSH hosts configuration found in 1Password."
fi
