#!/usr/bin/env bash
# Installs 1Password desktop + CLI on macOS using Homebrew (preferred)
# Falls back to official 1Password download URLs if brew is missing.
set -euo pipefail

has() { command -v "$1" >/dev/null 2>&1; }

install_with_brew() {
  echo "[macOS] installing via Homebrew‚Ä¶"
  # Ensure Homebrew
  if ! has brew; then
    echo "[macOS] Homebrew not found; installing‚Ä¶"
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    # Add brew to PATH for the current shell (both Intel/ARM typical paths)
    eval "$(/opt/homebrew/bin/brew shellenv 2>/dev/null || true)"
    eval "$(/usr/local/bin/brew shellenv 2>/dev/null || true)"
  fi

  # Install desktop app (cask) + CLI (formula)
  brew update
  brew install --cask 1password || true
  brew install 1password-cli || true
}

install_with_pkgs() {
  echo "[macOS] installing via official pkgs‚Ä¶"
  tmpdir="$(mktemp -d)"
  pushd "$tmpdir" >/dev/null

  # Desktop app
  curl -fsSLo "1password.pkg" "https://downloads.1password.com/mac/1Password.pkg"
  sudo installer -pkg "1password.pkg" -target /

  # CLI
  curl -fsSLo "op.zip" "https://cache.agilebits.com/dist/1P/op2/pkg/v2/op_darwin_amd64_v2.zip"
  # Try arm64 first; if it 404s, we‚Äôll keep amd64 Rosetta-compatible
  if curl -fIsS "https://cache.agilebits.com/dist/1P/op2/pkg/v2/op_darwin_arm64_v2.zip" >/dev/null; then
    curl -fsSLo "op_arm.zip" "https://cache.agilebits.com/dist/1P/op2/pkg/v2/op_darwin_arm64_v2.zip"
    unzip -qo "op_arm.zip"
  else
    unzip -qo "op.zip"
  fi
  sudo install -m 0755 op /usr/local/bin/op || sudo install -m 0755 op /opt/homebrew/bin/op || true

  popd >/dev/null
  rm -rf "$tmpdir"
}

if has op && has 1password; then
  echo "[macOS] 1Password CLI and app already present."
else
  if has brew; then install_with_brew; else install_with_pkgs; fi
fi

echo "[macOS] verifying‚Ä¶"
command -v 1password && 1password --version || true
command -v op && op --version || true


# --- prompt user to enable CLI integration and SSH agent --------------------
echo
echo "[macOS] Opening 1Password‚Ä¶"
open -a "1Password" || true
echo "[macOS] In 1Password, please enable these settings:"
echo "  1. Settings ‚Üí Developer ‚Üí ‚úÖ 'Integrate with 1Password CLI'"
echo "  2. Settings ‚Üí Developer ‚Üí ‚úÖ 'Use the SSH agent'"
echo "  3. (Optional) Settings ‚Üí Security ‚Üí ‚úÖ 'Unlock with Touch ID'"
echo
read -n 1 -s -r -p "[macOS] Press any key when finished‚Ä¶"
echo
if op account list >/dev/null 2>&1; then
  echo "[macOS] ‚úÖ 1Password CLI is integrated."
else
  echo "[macOS] ‚ö†Ô∏è  'op account list' didn't succeed. 1Password CLI integration is necessary for machine setup."
  exit 1
fi

# Check for SSH key and offer to create if missing
echo "[macOS] Checking for SSH key in 1Password..."
if ! op item get "Dev SSH Key" --fields "public key" >/dev/null 2>&1; then
  echo "[macOS] ‚ö†Ô∏è  SSH key 'Dev SSH Key' not found in 1Password."
  echo
  read -p "[macOS] Would you like to create a new SSH key now? (y/N): " -n 1 -r
  echo
  if [[ $REPLY =~ ^[Yy]$ ]]; then
    echo "[macOS] Creating new Ed25519 SSH key..."
    
    # Create SSH key with metadata including creation date
    creation_date=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
    if op item create \
      --category "SSH Key" \
      --title "Dev SSH Key" \
      --ssh-generate-key ed25519 \
      "Creation Date[text]=${creation_date}" \
      "Purpose[text]=Development machine SSH authentication and Git signing" \
      >/dev/null 2>&1; then
      
      echo "[macOS] ‚úÖ SSH key created successfully!"
      echo
      echo "[macOS] üîë Public key for GitHub:"
      echo "========================================================================="
      op item get "Dev SSH Key" --fields "public key"
      echo "========================================================================="
      echo
      echo "[macOS] üìã Next steps - Add this key to GitHub TWICE:"
      echo "  1. Go to https://github.com/settings/keys"
      echo "  2. Click 'New SSH key' ‚Üí Add as 'Authentication Key'"
      echo "  3. Click 'New SSH key' again ‚Üí Add as 'Signing Key'"
      echo
      read -n 1 -s -r -p "[macOS] Press any key after adding the key to GitHub (both auth & signing)..."
      echo
    else
      echo "[macOS] ‚ùå Failed to create SSH key. Please create it manually:"
      echo "[macOS] Run: op item create --category \"SSH Key\" --title \"Dev SSH Key\" --ssh-generate-key ed25519"
    fi
  else
    echo "[macOS] Skipping SSH key creation. You can create it manually later."
    echo "[macOS] See 1PASS_SETUP.md for instructions."
  fi
else
  echo "[macOS] ‚úÖ SSH key 'Dev SSH Key' found in 1Password."
  # Show key age if it has creation date metadata
  creation_date=$(op item get "Dev SSH Key" --fields "Creation Date" 2>/dev/null || echo "")
  if [ -n "$creation_date" ]; then
    echo "[macOS]    Created: ${creation_date}"
  fi
fi

# Check for ssh-hosts and offer to create if missing
echo "[macOS] Checking for SSH hosts configuration..."
if ! op item get "ssh-hosts" --fields "hosts" >/dev/null 2>&1; then
  echo "[macOS] ‚ö†Ô∏è  SSH hosts configuration 'ssh-hosts' not found."
  echo
  read -p "[macOS] Would you like to create it now? (y/N): " -n 1 -r
  echo
  if [[ $REPLY =~ ^[Yy]$ ]]; then
    # Create basic ssh-hosts configuration
    if op item create \
      --category "Secure Note" \
      --title "ssh-hosts" \
      "hosts=# Add your custom SSH host configurations here
# Example:
# Host myserver
#     HostName 192.168.1.100
#     User myuser
#     Port 22" \
      >/dev/null 2>&1; then
      echo "[macOS] ‚úÖ SSH hosts configuration created with template."
    else
      echo "[macOS] ‚ùå Failed to create SSH hosts configuration."
    fi
  fi
else
  echo "[macOS] ‚úÖ SSH hosts configuration found in 1Password."
fi

# Note about re-applying chezmoi when 1Password was just installed
echo "[macOS] Note: if 1pass was not installed before this command you will need to reapply to complete machine setup"
