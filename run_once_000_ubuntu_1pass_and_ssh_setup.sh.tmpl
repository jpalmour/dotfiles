#!/usr/bin/env bash
set -euo pipefail

# Set DEBUG=1 to increase verbosity and enable op debug logs
DEBUG="${DEBUG:-0}"
if [ "$DEBUG" = "1" ]; then
  set -x
  export OP_LOG_LEVEL="${OP_LOG_LEVEL:-debug}"
fi

arch="$(dpkg --print-architecture)"
repo_list="/etc/apt/sources.list.d/1password.list"
archive_key="/usr/share/keyrings/1password-archive-keyring.gpg"
debsig_pol_dir="/etc/debsig/policies/AC2D62742012EA22"
debsig_key_dir="/usr/share/debsig/keyrings/AC2D62742012EA22"

ensure_cmd() { command -v "$1" >/dev/null 2>&1 || { echo "Missing $1"; exit 1; }; }
ensure_cmd curl
ensure_cmd gpg
ensure_cmd sudo

# Add official repo (once)
if [ ! -f "$repo_list" ] || [ ! -f "$archive_key" ]; then
  echo "[ubuntu] adding official 1Password repo..."
  curl -fsSL https://downloads.1password.com/linux/keys/1password.asc \
    | sudo gpg --dearmor -o "$archive_key"
  echo "deb [arch=${arch} signed-by=${archive_key}] https://downloads.1password.com/linux/debian/${arch} stable main" \
    | sudo tee "$repo_list" >/dev/null
fi

# Add debsig policy & key (for verifying standalone .deb installs too)
if [ ! -f "${debsig_pol_dir}/1password.pol" ] || [ ! -f "${debsig_key_dir}/debsig.gpg" ]; then
  echo "[ubuntu] installing debsig policy for 1Password..."
  sudo mkdir -p "$debsig_pol_dir" "$debsig_key_dir"
  curl -fsSL https://downloads.1password.com/linux/debian/debsig/1password.pol \
    | sudo tee "${debsig_pol_dir}/1password.pol" >/dev/null
  curl -fsSL https://downloads.1password.com/linux/keys/1password.asc \
    | sudo gpg --dearmor -o "${debsig_key_dir}/debsig.gpg"
fi

echo "[ubuntu] updating apt and installing 1Password desktop + CLI..."
sudo apt-get update -y
sudo apt-get install -y 1password 1password-cli

# Sanity checks
echo "[ubuntu] verifying binaries..."
command -v 1password >/dev/null && echo " - 1password: $(command -v 1password)"
command -v op >/dev/null && echo " - op: $(command -v op)"
echo "[ubuntu] versions:"
1password --version || true
op --version || true

# --- prompt user to enable CLI integration and SSH agent --------------------
echo
echo "Opening 1Password…"
nohup 1password >/dev/null 2>&1 & disown || true
echo "[linux] In 1Password, please enable these settings:"
echo "  1. Settings → Developer → ✅ 'Integrate with 1Password CLI'"
echo "  2. Settings → Developer → ✅ 'Use the SSH agent'"
echo "  3. Make sure you're signed in and the app is unlocked"
echo
read -n 1 -s -r -p "[linux] Press any key when finished…"
echo
if op account list >/dev/null 2>&1; then
  echo "[linux] ✅ 1Password CLI is integrated."
else
  echo "[linux] ⚠️  'op account list' didn't succeed. 1Password CLI integration is necessary for machine setup."
  exit 1
fi

# Check for SSH key and offer to create if missing
echo "[linux] Checking for SSH key in 1Password..."
if ! op item get "Dev SSH Key" --fields "public key" >/dev/null 2>&1; then
  echo "[linux] ⚠️  SSH key 'Dev SSH Key' not found in 1Password."
  echo
  read -p "[linux] Would you like to create a new SSH key now? (y/N): " -n 1 -r
  echo
  if [[ $REPLY =~ ^[Yy]$ ]]; then
    echo "[linux] Creating new Ed25519 SSH key..."
    
    # Create SSH key with metadata including creation date
    creation_date=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
    # Attempt to create the key and capture any error output for troubleshooting.
    if output=$(op item create \
      --category "SSH Key" \
      --title "Dev SSH Key" \
      --ssh-generate-key ed25519 \
      "Creation Date[text]=${creation_date}" \
      "Purpose[text]=Development machine SSH authentication and Git signing" 2>&1); then
      
      echo "[linux] ✅ SSH key created successfully!"
      echo
      echo "[linux] 🔑 Public key for GitHub:"
      echo "========================================================================="
      op item get "Dev SSH Key" --fields "public key"
      echo "========================================================================="
      echo
      echo "[linux] 📋 Next steps - Add this key to GitHub TWICE:"
      echo "  1. Go to https://github.com/settings/keys"
      echo "  2. Click 'New SSH key' → Add as 'Authentication Key'"
      echo "  3. Click 'New SSH key' again → Add as 'Signing Key'"
      echo
      read -n 1 -s -r -p "[linux] Press any key after adding the key to GitHub (both auth & signing)..."
      echo
    else
      echo "[linux] ❌ Failed to create SSH key via 1Password CLI. Details:" >&2
      echo "$output" >&2
      echo >&2
      echo "[linux] Try running this manually to reproduce and see full output:" >&2
      echo "op item create --category 'SSH Key' --title 'Dev SSH Key' --ssh-generate-key ed25519 \"Creation Date[text]=${creation_date}\" \"Purpose[text]=Development machine SSH authentication and Git signing\"" >&2
      echo >&2
      echo "[linux] Tip: set DEBUG=1 (or OP_LOG_LEVEL=debug) for verbose logs." >&2
    fi
  else
    echo "[linux] Skipping SSH key creation. You can create it manually later."
    echo "[linux] See 1PASS_SETUP.md for instructions."
  fi
else
  echo "[linux] ✅ SSH key 'Dev SSH Key' found in 1Password."
  # Show key age if it has creation date metadata
  creation_date=$(op item get "Dev SSH Key" --fields "Creation Date" 2>/dev/null || echo "")
  if [ -n "$creation_date" ]; then
    echo "[linux]    Created: ${creation_date}"
  fi
fi

# Check for ssh-hosts and offer to create if missing
echo "[linux] Checking for SSH hosts configuration..."
if ! op item get "ssh-hosts" --fields "hosts" >/dev/null 2>&1; then
  echo "[linux] ⚠️  SSH hosts configuration 'ssh-hosts' not found."
  echo
  read -p "[linux] Would you like to create it now? (y/N): " -n 1 -r
  echo
  if [[ $REPLY =~ ^[Yy]$ ]]; then
    # Create basic ssh-hosts configuration
    if output=$(op item create \
      --category "Secure Note" \
      --title "ssh-hosts" \
      "hosts=# Add your custom SSH host configurations here
# Example:
# Host myserver
#     HostName 192.168.1.100
#     User myuser
#     Port 22" \
      2>&1); then
      echo "[linux] ✅ SSH hosts configuration created with template."
    else
      echo "[linux] ❌ Failed to create SSH hosts configuration. Details:" >&2
      echo "$output" >&2
    fi
  fi
else
  echo "[linux] ✅ SSH hosts configuration found in 1Password."
fi

# Note about re-applying chezmoi when 1Password was just installed
echo "[linux] Note: if 1pass was not installed before this command you will need to reapply to complete machine setup"
